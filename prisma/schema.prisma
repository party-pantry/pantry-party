generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                @id @default(autoincrement())
  email             String             @unique
  username          String             @unique
  password          String
  houses            House[]
  recipes           Recipe[]
  shoppingListItems ShoppingListItem[]
  reviews           Review[]
}

model House {
  id        Int       @id @default(autoincrement())
  userId    Int
  name      String
  address   String?
  latitude  Float?
  longitude Float?
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  storages  Storage[]
}

model Storage {
  id      Int      @id @default(autoincrement())
  houseId Int
  name    String
  type    Category
  stocks  Stock[]
  house   House    @relation(fields: [houseId], references: [id], onDelete: Cascade)
}

model Ingredient {
  id                Int                @id @default(autoincrement())
  name              String
  price             Float?             @default(0)
  foodCategory      FoodCategory
  recipes           RecipeIngredient[]
  shoppingListItems ShoppingListItem[]
  stocks            Stock[]
}

model Stock {
  ingredientId Int
  storageId    Int
  quantity     Float
  unit         Unit
  last_updated DateTime   @default(now()) @updatedAt
  status       Status     @default(GOOD)
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  storage      Storage    @relation(fields: [storageId], references: [id], onDelete: Cascade)

  @@id([ingredientId, storageId])
}

model Recipe {
  id           Int                 @id @default(autoincrement())
  userId       Int
  name         String
  description  String?
  difficulty   Difficulty
  isStarred    Boolean             @default(false)
  prepTime     Int
  cookTime     Int
  downTime     Int?
  servings     Int
  postDate     DateTime            @default(now()) @updatedAt
  rating       Int
  user         User                @relation(fields: [userId], references: [id])
  ingredients  RecipeIngredient[]
  instructions RecipeInstruction[]
  nutrition    RecipeNutrition[]
  reviews      Review[]
}

model RecipeIngredient {
  id           Int        @id @default(autoincrement())
  recipeId     Int
  ingredientId Int
  quantity     Float
  unit         Unit
  name         String
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  recipe       Recipe     @relation(fields: [recipeId], references: [id])
}

model RecipeInstruction {
  id       Int    @id @default(autoincrement())
  recipeId Int
  step     Int
  content  String
  recipe   Recipe @relation(fields: [recipeId], references: [id])
}

model RecipeNutrition {
  id       Int    @id @default(autoincrement())
  recipeId Int
  name     String
  amount   Float
  unit     String
  recipe   Recipe @relation(fields: [recipeId], references: [id])
}

model ShoppingListItem {
  id                      Int         @id @default(autoincrement())
  userId                  Int
  ingredientId            Int?
  name                    String
  quantity                String
  category                String
  priority                String
  purchased               Boolean     @default(false)
  source                  String
  addedDate               DateTime    @default(now())
  sourceStockIngredientId Int?
  sourceStorageId         Int?
  price                   Float?
  ingredient              Ingredient? @relation(fields: [ingredientId], references: [id])
  user                    User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Review {
  id        Int      @id @default(autoincrement())
  recipeId  Int
  userId    Int
  rating    Float
  comment   String?
  createdAt DateTime @default(now())

  recipe    Recipe   @relation(fields: [recipeId], references: [id])
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([recipeId, userId])
}

enum Unit {
  OUNCE
  POUND
  GRAM
  KILOGRAM
  MILILITER
  LITER
  FLUID_OUNCE
  CUP
  PINT
  QUART
  GALLON
  TEASPOON
  TABLESPOON
  BAG
  CAN
  BOTTLE
  BOX
  PIECE
  SACK
  LOAVES
  BUNDLES
  PACKAGE
}

enum Status {
  GOOD
  LOW_STOCK
  OUT_OF_STOCK
  EXPIRED
}

enum Category {
  FRIDGE
  PANTRY
  FREEZER
  SPICE_RACK
  OTHER
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum FoodCategory {
  DAIRY
  PRODUCE
  MEAT
  FROZEN
  OTHER
}